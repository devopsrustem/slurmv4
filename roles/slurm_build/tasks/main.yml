# roles/slurm_build/tasks/main.yml - Slurm compilation and distribution
---
- name: "Display build information"
  debug:
    msg: "Building Slurm {{ slurm_version }} with PMIx support on {{ inventory_hostname }}"



- name: "Install Slurm build dependencies"
  apt:
    name: "{{ slurm_build_dependencies }}"
    state: present
  when: inventory_hostname in groups['slurm_master']
  tags:
    - dependencies

- name: "Create Slurm build directory"
  file:
    path: "{{ slurm_build_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: inventory_hostname in groups['slurm_master']
  tags:
    - download
    - build

- name: "Check for existing Slurm source"
  stat:
    path: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}.tar.bz2"
  register: slurm_tarball
  when: inventory_hostname in groups['slurm_master']

- name: "Download Slurm source"
  get_url:
    url: "{{ slurm_download_url }}"
    dest: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}.tar.bz2"
    mode: '0644'
    timeout: 300
  when: 
    - inventory_hostname in groups['slurm_master']
    - not slurm_tarball.stat.exists

- name: "Clean previous build if forced rebuild"
  shell: rm -rf {{ slurm_build_dir }}/slurm-{{ slurm_version }}
  when: 
    - inventory_hostname in groups['slurm_master']
    - slurm_force_rebuild | bool

- name: "Extract Slurm source"
  unarchive:
    src: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}.tar.bz2"
    dest: "{{ slurm_build_dir }}"
    remote_src: yes
  when: inventory_hostname in groups['slurm_master']

- name: "Verify PMIx installation"
  stat:
    path: "/opt/pmix/lib/libpmix.so"
  register: pmix_check
  when: inventory_hostname in groups['slurm_master']

- name: "Fail if PMIx not found"
  fail:
    msg: "PMIx not installed in /opt/pmix. Install PMIx on master node first."
  when: 
    - inventory_hostname in groups['slurm_master']
    - not pmix_check.stat.exists

- name: "Configure Slurm build"
  shell: |
    export PKG_CONFIG_PATH=/opt/pmix/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
    export LD_LIBRARY_PATH=/opt/pmix/lib:/usr/lib/x86_64-linux-gnu
    export CPPFLAGS="-I/opt/pmix/include $CPPFLAGS"
    export LDFLAGS="-L/opt/pmix/lib -Wl,-rpath,/opt/pmix/lib $LDFLAGS"
    cd {{ slurm_build_dir }}/slurm-{{ slurm_version }}
    ./configure \
      --prefix={{ slurm_install_prefix }} \
      --sysconfdir=/etc/slurm \
      --without-mysql \
      --with-munge \
      --with-hwloc \
      --with-json \
      --with-jwt \
      --enable-pam \
      --with-pam_dir=/lib/x86_64-linux-gnu/security/ \
      --with-pmix=/opt/pmix \
      --enable-slurmrestd \
      --enable-debug \
      --enable-developer
  args:
    chdir: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}"
  when: inventory_hostname in groups['slurm_master']
  register: slurm_configure
  tags:
    - build

- name: "Build Slurm"
  shell: |
    cd {{ slurm_build_dir }}/slurm-{{ slurm_version }}
    make -j$(nproc)
  args:
    chdir: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}"
    creates: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}/src/slurmctld/slurmctld"
  when: inventory_hostname in groups['slurm_master']

- name: "Install Slurm on master"
  shell: |
    cd {{ slurm_build_dir }}/slurm-{{ slurm_version }}
    make install
  args:
    chdir: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}"
    creates: "{{ slurm_install_prefix }}/sbin/slurmctld"
  when: inventory_hostname in groups['slurm_master']

- name: "Install Slurm development headers"
  shell: |
    cd {{ slurm_build_dir }}/slurm-{{ slurm_version }}
    mkdir -p {{ slurm_install_prefix }}/include/slurm
    cp -r slurm/*.h {{ slurm_install_prefix }}/include/slurm/
    cp src/slurmd/slurmd.h {{ slurm_install_prefix }}/include/slurm/ 2>/dev/null || true
  args:
    chdir: "{{ slurm_build_dir }}/slurm-{{ slurm_version }}"
    creates: "{{ slurm_install_prefix }}/include/slurm/spank.h"
  when: inventory_hostname in groups['slurm_master']

- name: "Create Slurm directory on all nodes"
  file:
    path: "{{ slurm_install_prefix }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: "Create Slurm distribution archive"
  shell: |
    set -e
    rm -rf /sw/slurm-complete
    mkdir -p /sw/slurm-complete
    cp -r {{ slurm_install_prefix }}/* /sw/slurm-complete/
    
    if [ -f /sw/slurm-complete/include/slurm/spank.h ]; then
      echo "Headers included in archive: $(find /sw/slurm-complete/include -name '*.h' | wc -l) files"
    else
      echo "ERROR: Headers not found in archive!"
      exit 1
    fi
    
    chown -R root:root /sw/slurm-complete
    chmod -R 755 /sw/slurm-complete/bin /sw/slurm-complete/sbin
    chmod -R 644 /sw/slurm-complete/include
  when: inventory_hostname in groups['slurm_master']

- name: "Wait for archive to be ready"
  wait_for:
    path: "/sw/slurm-complete/include/slurm/spank.h"
    timeout: 30
  when: inventory_hostname not in groups['slurm_master']

- name: "Install Slurm from archive on nodes"
  shell: |
    set -e
    systemctl stop slurmd 2>/dev/null || true
    cp -r /sw/slurm-complete/* {{ slurm_install_prefix }}/
    chown -R root:root {{ slurm_install_prefix }}
    chmod -R 755 {{ slurm_install_prefix }}/bin {{ slurm_install_prefix }}/sbin
    chmod -R 644 {{ slurm_install_prefix }}/include
    
    if [ -f {{ slurm_install_prefix }}/include/slurm/spank.h ]; then
      echo "Headers installed: $(find {{ slurm_install_prefix }}/include -name '*.h' | wc -l) files"
    else
      echo "ERROR: Headers not installed!"
      exit 1
    fi
  when: inventory_hostname not in groups['slurm_master']

- name: "Create symlinks for Slurm user commands"
  file:
    src: "{{ slurm_install_prefix }}/bin/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    state: link
    force: yes
  loop:
    - sinfo
    - squeue
    - scancel
    - sbatch
    - salloc
    - srun
    - sacct
    - scontrol
    - sprio
    - smap
    - sdiag
    - sstat
    - sreport
    - sacctmgr
    - sattach
    - sbcast
    - sshare
    - sview

- name: "Create symlinks for Slurm system daemons"
  file:
    src: "{{ slurm_install_prefix }}/sbin/{{ item }}"
    dest: "/usr/sbin/{{ item }}"
    state: link
    force: yes
  loop:
    - slurmctld
    - slurmd
    - slurmdbd
    - slurmrestd
    - slurmstepd

- name: "Update library cache"
  shell: ldconfig

- name: "Verify Slurm version"
  command: "{{ slurm_install_prefix }}/bin/sinfo -V"
  register: slurm_version_check
  changed_when: false
  failed_when: false

- name: "Verify JWT support"
  shell: "{{ slurm_install_prefix }}/sbin/slurmctld -V 2>&1 | grep -i jwt || echo 'JWT support check'"
  register: jwt_check
  changed_when: false
  failed_when: false

- name: "Verify development headers"
  shell: |
    if [ -f {{ slurm_install_prefix }}/include/slurm/spank.h ]; then
      echo "Headers found: $(find {{ slurm_install_prefix }}/include -name '*.h' | wc -l) files"
    else
      echo "Headers not found - Pyxis will not compile!"
    fi
  register: headers_check
  changed_when: false
  failed_when: false
