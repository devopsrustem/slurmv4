# roles/common/tasks/main.yml - Base system configuration for all cluster nodes
---
- name: "Display common role start"
  debug:
    msg: "Configuring base components on {{ inventory_hostname }}"

- name: "Update apt cache"
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: "Install base packages"
  apt:
    name: "{{ common_base_packages }}"
    state: present

- name: "Configure timezone"
  timezone:
    name: "{{ timezone }}"

- name: "Create slurm user"
  user:
    name: "{{ slurm_user }}"
    uid: "{{ slurm_uid }}"
    system: yes
    shell: /bin/false
    home: /var/lib/slurm
    create_home: yes

- name: "Install MUNGE"
  apt:
    name: 
      - munge
      - libmunge-dev
    state: present

- name: "Stop MUNGE before configuration"
  systemd:
    name: munge
    state: stopped
    enabled: no

- name: "Create MUNGE key on master node"
  command:
    cmd: /usr/sbin/create-munge-key
    creates: /etc/munge/munge.key
  when: inventory_hostname in groups['slurm_master']

- name: "Configure MUNGE directory permissions"
  file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
    state: directory
  loop:
    - { path: /etc/munge, owner: munge, group: munge, mode: '0700' }
    - { path: /var/log/munge, owner: munge, group: munge, mode: '0700' }
    - { path: /var/lib/munge, owner: munge, group: munge, mode: '0700' }
    - { path: /run/munge, owner: munge, group: munge, mode: '0755' }

- name: "Fetch MUNGE key from master"
  slurp:
    src: /etc/munge/munge.key
  register: munge_key_from_master
  delegate_to: "{{ groups['slurm_master'][0] }}"
  when: inventory_hostname not in groups['slurm_master']

- name: "Create MUNGE key on other nodes"
  copy:
    content: "{{ munge_key_from_master.content | b64decode }}"
    dest: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: '0400'
  when: inventory_hostname not in groups['slurm_master']

- name: "Set MUNGE key permissions on master"
  file:
    path: /etc/munge/munge.key
    owner: munge
    group: munge
    mode: '0400'
  when: inventory_hostname in groups['slurm_master']

- name: "Start and enable MUNGE"
  systemd:
    name: munge
    state: started
    enabled: yes
    daemon_reload: yes

- name: "Test MUNGE functionality"
  command: munge -n
  register: munge_test
  changed_when: false

- name: "Install HWLOC"
  apt:
    name:
      - hwloc
      - libhwloc-dev
    state: present

- name: "Verify HWLOC installation"
  command: lstopo --version
  register: hwloc_version
  changed_when: false

- name: "Install NFS server on master"
  apt:
    name:
      - nfs-kernel-server
      - nfs-common
    state: present
  when: inventory_hostname in groups['nfs_server']

- name: "Create NFS export directories"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /home
    - /sw
  when: inventory_hostname in groups['nfs_server']

- name: "Clean old NFS exports"
  lineinfile:
    path: /etc/exports
    regexp: "^{{ item }}.*"
    state: absent
  loop:
    - /home
    - /sw
  when: inventory_hostname in groups['nfs_server']

- name: "Configure NFS exports"
  lineinfile:
    path: /etc/exports
    line: "{{ item.path }} {{ item.client_ip }}({{ nfs_export_options }})"
    create: yes
  loop: >-
    {%- set exports = [] -%}
    {%- for path in ['/home', '/sw'] -%}
      {%- for host in groups['nfs_client'] -%}
        {%- set client_ip = hostvars[host]['ansible_default_ipv4']['address'] | default(host) -%}
        {%- set _ = exports.append({'path': path, 'client_ip': client_ip}) -%}
      {%- endfor -%}
    {%- endfor -%}
    {{ exports }}
  when: inventory_hostname in groups['nfs_server']
  notify: 
    - restart nfs-server
    - reload nfs-exports

- name: "Start and enable NFS server"
  systemd:
    name: nfs-kernel-server
    state: started
    enabled: yes
  when: inventory_hostname in groups['nfs_server']

- name: "Reload NFS exports"
  command: exportfs -ra
  when: inventory_hostname in groups['nfs_server']

- name: "Verify NFS exports"
  command: exportfs -v
  register: nfs_exports_check
  when: inventory_hostname in groups['nfs_server']

- name: "Install NFS client"
  apt:
    name: nfs-common
    state: present
  when: inventory_hostname in groups['nfs_client']

- name: "Create NFS mount points"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - /sw
  when: inventory_hostname in groups['nfs_client']

- name: "Mount NFS shares"
  mount:
    path: "{{ item.path }}"
    src: "{{ groups['nfs_server'][0] }}:{{ item.src }}"
    fstype: nfs
    opts: "{{ nfs_mount_options }}"
    state: mounted
  loop:
    - { path: /home, src: /home }
    - { path: /sw, src: /sw }
  when: inventory_hostname in groups['nfs_client']

- name: "Install MariaDB on master"
  apt:
    name:
      - mariadb-server
      - mariadb-client  
      - python3-pymysql
    state: present
  when: inventory_hostname in groups['slurm_master']

- name: "Create Slurm base directories"
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  loop:
    - { path: /var/log/slurm, owner: slurm, group: slurm, mode: '0755' }
    - { path: /var/spool/slurm, owner: slurm, group: slurm, mode: '0755' }
    - { path: /var/spool/slurm/ctld, owner: slurm, group: slurm, mode: '0755' }
    - { path: /var/spool/slurm/d, owner: slurm, group: slurm, mode: '0755' }
    - { path: /etc/slurm, owner: root, group: root, mode: '0755' }
    - { path: /var/lib/slurm, owner: slurm, group: slurm, mode: '0755' }