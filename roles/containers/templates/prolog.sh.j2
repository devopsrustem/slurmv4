#!/bin/bash
# roles/containers/templates/prolog.sh.j2
#
# Slurm Prolog Script for Enroot Container Support
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
#

# =============================================================================
# ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ
# =============================================================================

export SLURM_JOB_ID="${SLURM_JOB_ID:-unknown}"
export SLURM_JOB_USER="${SLURM_JOB_USER:-unknown}"
export SLURM_JOB_UID="${SLURM_JOB_UID:-1000}"
export SLURM_JOB_GID="${SLURM_JOB_GID:-1000}"

# Enroot переменные
export ENROOT_DATA_PATH="{{ enroot_data_dir }}"
export ENROOT_CACHE_PATH="{{ enroot_cache_dir }}"
export ENROOT_RUNTIME_PATH="{{ enroot_runtime_path }}"

# Логирование
PROLOG_LOG="/var/log/slurm/prolog.log"
exec 1>> "${PROLOG_LOG}"
exec 2>> "${PROLOG_LOG}"

# =============================================================================
# ФУНКЦИИ
# =============================================================================

log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROLOG] [INFO] [Job:${SLURM_JOB_ID}] $*"
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PROLOG] [ERROR] [Job:${SLURM_JOB_ID}] $*"
}

# =============================================================================
# ПОДГОТОВКА RUNTIME ДИРЕКТОРИЙ
# =============================================================================

log_info "Начало prolog для пользователя ${SLURM_JOB_USER}"

# Создаем runtime директории для задачи
JOB_RUNTIME_DIR="{{ enroot_runtime_path }}/${SLURM_JOB_ID}"
if [[ ! -d "${JOB_RUNTIME_DIR}" ]]; then
    mkdir -p "${JOB_RUNTIME_DIR}" || {
        log_error "Не удалось создать runtime директорию ${JOB_RUNTIME_DIR}"
        exit 1
    }
    chown "${SLURM_JOB_UID}:${SLURM_JOB_GID}" "${JOB_RUNTIME_DIR}"
    log_info "Создана runtime директория ${JOB_RUNTIME_DIR}"
fi

# =============================================================================
# ПРОВЕРКА GPU ДОСТУПНОСТИ
# =============================================================================

{% if enroot_gpu_support %}
if command -v nvidia-smi >/dev/null 2>&1; then
    GPU_COUNT=$(nvidia-smi -L | wc -l)
    log_info "Обнаружено GPU: ${GPU_COUNT} шт."
    
    # Устанавливаем переменные для доступа к GPU
    export NVIDIA_VISIBLE_DEVICES="${SLURM_JOB_GPUS:-all}"
    export NVIDIA_DRIVER_CAPABILITIES="compute,utility"
    
    log_info "GPU доступ настроен: NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES}"
else
    log_info "NVIDIA GPU драйверы недоступны"
fi
{% else %}
log_info "GPU поддержка отключена в конфигурации"
{% endif %}

# =============================================================================
# ПОДГОТОВКА ПОЛЬЗОВАТЕЛЬСКИХ ДИРЕКТОРИЙ
# =============================================================================

# Создаем пользовательские директории в cache если нужно (под root)
USER_CACHE_DIR="{{ enroot_cache_dir }}/${SLURM_JOB_USER}"
if [[ ! -d "${USER_CACHE_DIR}" ]]; then
    mkdir -p "${USER_CACHE_DIR}" || {
        log_error "Не удалось создать пользовательскую cache директорию"
        exit 1
    }
    chown "${SLURM_JOB_UID}:${SLURM_JOB_GID}" "${USER_CACHE_DIR}"
    log_info "Создана пользовательская cache директория ${USER_CACHE_DIR}"
fi

# =============================================================================
# ПРОВЕРКА BIND MOUNTS
# =============================================================================

{% for mount in enroot_bind_mounts %}
{% set mount_parts = mount.split(':') %}
{% set source_path = mount_parts[0] %}
MOUNT_PATH="{{ source_path }}"
if [[ ! -d "${MOUNT_PATH}" ]]; then
    log_error "Bind mount директория не существует: ${MOUNT_PATH}"
    # Не завершаем с ошибкой, просто логируем
fi
{% endfor %}

# =============================================================================
# ОЧИСТКА СТАРЫХ RUNTIME ФАЙЛОВ (если есть)
# =============================================================================

# Очищаем старые runtime директории этого пользователя (старше 1 дня)
find "{{ enroot_runtime_path }}" -maxdepth 1 -name "*" -type d -user "${SLURM_JOB_UID}" -mtime +1 -exec rm -rf {} + 2>/dev/null || true

# =============================================================================
# FINALIZATION
# =============================================================================

log_info "Prolog завершен успешно для задачи ${SLURM_JOB_ID}"

# Экспортируем переменные для задачи
cat > "${JOB_RUNTIME_DIR}/job_env" << EOF
export ENROOT_DATA_PATH="{{ enroot_data_dir }}"
export ENROOT_CACHE_PATH="{{ enroot_cache_dir }}"
export ENROOT_RUNTIME_PATH="{{ enroot_runtime_path }}"
{% if enroot_gpu_support %}
export NVIDIA_VISIBLE_DEVICES="\${SLURM_JOB_GPUS:-all}"
export NVIDIA_DRIVER_CAPABILITIES="compute,utility"
{% endif %}
EOF

chmod 644 "${JOB_RUNTIME_DIR}/job_env"

exit 0