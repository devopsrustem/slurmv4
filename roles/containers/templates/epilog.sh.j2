#!/bin/bash
# roles/containers/templates/epilog.sh.j2
#
# Slurm Epilog Script for Enroot Container Cleanup
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
#

# =============================================================================
# ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ
# =============================================================================

export SLURM_JOB_ID="${SLURM_JOB_ID:-unknown}"
export SLURM_JOB_USER="${SLURM_JOB_USER:-unknown}"
export SLURM_JOB_UID="${SLURM_JOB_UID:-1000}"
export SLURM_JOB_GID="${SLURM_JOB_GID:-1000}"

# Enroot переменные
export ENROOT_RUNTIME_PATH="{{ enroot_runtime_path }}"

# Логирование
EPILOG_LOG="/var/log/slurm/epilog.log"
exec 1>> "${EPILOG_LOG}"
exec 2>> "${EPILOG_LOG}"

# =============================================================================
# ФУНКЦИИ
# =============================================================================

log_info() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [EPILOG] [INFO] [Job:${SLURM_JOB_ID}] $*"
}

log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [EPILOG] [ERROR] [Job:${SLURM_JOB_ID}] $*"
}

log_warn() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [EPILOG] [WARN] [Job:${SLURM_JOB_ID}] $*"
}

# =============================================================================
# CLEANUP FUNCTIONS
# =============================================================================

cleanup_job_runtime() {
    local job_runtime_dir="{{ enroot_runtime_path }}/${SLURM_JOB_ID}"
    
    if [[ -d "${job_runtime_dir}" ]]; then
        log_info "Очистка runtime директории ${job_runtime_dir}"
        
        # Убиваем все процессы пользователя в runtime директории
        if lsof "${job_runtime_dir}" 2>/dev/null | grep -q "${job_runtime_dir}"; then
            log_warn "Обнаружены активные процессы в ${job_runtime_dir}, завершаем..."
            lsof +D "${job_runtime_dir}" 2>/dev/null | awk 'NR>1 {print $2}' | xargs -r kill -TERM 2>/dev/null || true
            sleep 2
            lsof +D "${job_runtime_dir}" 2>/dev/null | awk 'NR>1 {print $2}' | xargs -r kill -KILL 2>/dev/null || true
        fi
        
        # Размонтируем любые bind mounts
        if mount | grep -q "${job_runtime_dir}"; then
            log_info "Размонтирование bind mounts в ${job_runtime_dir}"
            mount | grep "${job_runtime_dir}" | awk '{print $3}' | sort -r | while read mountpoint; do
                umount "${mountpoint}" 2>/dev/null || umount -l "${mountpoint}" 2>/dev/null || true
            done
        fi
        
        # Удаляем директорию
        rm -rf "${job_runtime_dir}" || {
            log_error "Не удалось удалить runtime директорию ${job_runtime_dir}"
            return 1
        }
        
        log_info "Runtime директория ${job_runtime_dir} успешно удалена"
    else
        log_info "Runtime директория для задачи ${SLURM_JOB_ID} не найдена"
    fi
    
    return 0
}

cleanup_enroot_containers() {
    log_info "Проверка активных Enroot контейнеров пользователя ${SLURM_JOB_USER}"
    
    # Список активных контейнеров этого пользователя
    if command -v enroot >/dev/null 2>&1; then
        # Ищем контейнеры через процессы (не привязываемся к конкретному пользователю enroot)
        local containers=$(ps aux | grep -E "enroot.*${SLURM_JOB_ID}" | grep -v grep | awk '{print $2}' || true)
        
        if [[ -n "${containers}" ]]; then
            log_warn "Обнаружены активные Enroot процессы, завершаем..."
            echo "${containers}" | xargs -r kill -TERM 2>/dev/null || true
            sleep 3
            echo "${containers}" | xargs -r kill -KILL 2>/dev/null || true
        fi
        
        # Очистка временных файлов Enroot для этой задачи
        local enroot_temp_pattern="{{ enroot_temp_dir }}/*${SLURM_JOB_ID}*"
        if ls ${enroot_temp_pattern} >/dev/null 2>&1; then
            log_info "Очистка временных файлов Enroot"
            rm -rf ${enroot_temp_pattern} || true
        fi
    else
        log_warn "Команда enroot недоступна для проверки контейнеров"
    fi
}

cleanup_cgroups() {
    # Очистка cgroups если остались висячие
    local cgroup_path="/sys/fs/cgroup"
    
    if [[ -d "${cgroup_path}" ]]; then
        # Ищем cgroups связанные с этой задачей
        find "${cgroup_path}" -name "*${SLURM_JOB_ID}*" -type d 2>/dev/null | while read cgroup_dir; do
            if [[ -w "${cgroup_dir}/cgroup.procs" ]]; then
                # Переносим процессы в корневую cgroup
                if [[ -s "${cgroup_dir}/cgroup.procs" ]]; then
                    log_info "Очистка cgroup ${cgroup_dir}"
                    cat "${cgroup_dir}/cgroup.procs" | while read pid; do
                        echo "${pid}" > "${cgroup_path}/cgroup.procs" 2>/dev/null || true
                    done
                fi
                
                # Удаляем cgroup
                rmdir "${cgroup_dir}" 2>/dev/null || true
            fi
        done
    fi
}

# =============================================================================
# MAIN CLEANUP LOGIC
# =============================================================================

log_info "Начало epilog для задачи ${SLURM_JOB_ID} пользователя ${SLURM_JOB_USER}"

# 1. Очистка runtime директорий
cleanup_job_runtime

# 2. Очистка Enroot контейнеров
cleanup_enroot_containers

# 3. Очистка cgroups
cleanup_cgroups

# =============================================================================
# СТАТИСТИКА ОЧИСТКИ
# =============================================================================

# Собираем статистику использования ресурсов после очистки
if [[ -f "/proc/meminfo" ]]; then
    MEMORY_FREE=$(grep MemAvailable /proc/meminfo | awk '{print $2}')
    log_info "Свободная память после очистки: $((MEMORY_FREE / 1024)) MB"
fi

# Проверяем свободное место на диске
DISK_FREE=$(df {{ enroot_runtime_path }} | tail -1 | awk '{print $4}')
log_info "Свободное место в runtime: $((DISK_FREE / 1024)) MB"

# =============================================================================
# ГЛОБАЛЬНАЯ ОЧИСТКА (периодическая)
# =============================================================================

# Раз в N запусков делаем глобальную очистку старых файлов
if (( RANDOM % 10 == 0 )); then
    log_info "Выполнение периодической глобальной очистки"
    
    # Очистка старых runtime директорий (старше 1 дня)
    find "{{ enroot_runtime_path }}" -maxdepth 1 -type d -mtime +1 -exec rm -rf {} + 2>/dev/null || true
    
    # Очистка старых temp файлов
    find "{{ enroot_temp_dir }}" -type f -mtime +1 -delete 2>/dev/null || true
    
    # Очистка логов старше недели
    find "/var/log/slurm" -name "*.log" -mtime +7 -exec truncate -s 0 {} + 2>/dev/null || true
    
    log_info "Периодическая очистка завершена"
fi

# =============================================================================
# FINALIZATION
# =============================================================================

log_info "Epilog завершен успешно для задачи ${SLURM_JOB_ID}"

exit 0