# roles/containers/tasks/main.yml
---
# =============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê ENROOT + PYXIS –î–õ–Ø –ö–û–ù–¢–ï–ô–ù–ï–†–ò–ó–ê–¶–ò–ò
# =============================================================================

- name: "[CONTAINERS] –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Enroot + Pyxis"
  debug:
    msg: |
      üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞ {{ inventory_hostname }}
      üì¶ Enroot {{ enroot_version }} + Pyxis {{ pyxis_version }}
      üéÆ GPU: {{ enroot_gpu_support | ternary('–≤–∫–ª—é—á–µ–Ω–æ', '–æ—Ç–∫–ª—é—á–µ–Ω–æ') }}

# =============================================================================
# –ü–û–î–ì–û–¢–û–í–ö–ê –°–ò–°–¢–ï–ú–´ (–∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –ë–ï–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è enroot)
# =============================================================================

- name: "[CONTAINERS] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
  apt:
    name: "{{ enroot_system_packages + pyxis_build_packages }}"
    state: present
    update_cache: yes
  tags: 
    - packages
    - system

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop:
    - { path: "{{ enroot_config_dir }}" }
    - { path: "{{ enroot_data_dir }}" }
    - { path: "{{ enroot_cache_dir }}" }
    - { path: "{{ enroot_runtime_path }}", mode: "0755" }
    - { path: "{{ slurm_prolog_dir }}" }
    - { path: "{{ slurm_epilog_dir }}" }
    - { path: "/tmp/containers-build" }
    - { path: "/etc/enroot/hooks.d" }
  tags:
    - directories

- name: "[CONTAINERS] –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ tmpfs –¥–ª—è /run (–¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤)"
  mount:
    name: /run
    src: tmpfs
    opts: "size={{ pyxis_run_tmpfs_size | default('16G') }}"
    fstype: tmpfs
    state: mounted
  tags:
    - tmpfs

# =============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê ENROOT
# =============================================================================

- name: "[CONTAINERS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Enroot"
  stat:
    path: "/usr/bin/enroot"
  register: enroot_installed
  tags: enroot

- name: "[CONTAINERS] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Enroot {{ enroot_version }}"
  get_url:
    url: "{{ enroot_download_url }}/enroot_{{ enroot_version }}-1_amd64.deb"
    dest: "/tmp/containers-build/enroot_{{ enroot_version }}-1_amd64.deb"
    mode: '0644'
    timeout: 300
  when: not enroot_installed.stat.exists
  tags: enroot

- name: "[CONTAINERS] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Enroot –∏–∑ DEB –ø–∞–∫–µ—Ç–∞"
  apt:
    deb: "/tmp/containers-build/enroot_{{ enroot_version }}-1_amd64.deb"
    state: present
  when: not enroot_installed.stat.exists
  tags: enroot

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Enroot"
  template:
    src: enroot.conf.j2
    dest: "{{ enroot_config_dir }}/enroot.conf"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  tags: 
    - enroot
    - config

# =============================================================================
# –£–°–¢–ê–ù–û–í–ö–ê PYXIS (–∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –≤ /usr/local/src/pyxis)
# =============================================================================

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Pyxis –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
  file:
    path: "{{ pyxis_build_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  tags: pyxis

- name: "[CONTAINERS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Pyxis"
  stat:
    path: "{{ pyxis_library_path }}"
  register: pyxis_installed
  tags: pyxis

- name: "[CONTAINERS] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ Pyxis {{ pyxis_version }}"
  get_url:
    url: "{{ pyxis_download_url }}"
    dest: "/tmp/containers-build/pyxis-{{ pyxis_version }}.tar.gz"
    mode: '0644'
    timeout: 300
  when: not pyxis_installed.stat.exists
  tags: pyxis

- name: "[CONTAINERS] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ Pyxis"
  unarchive:
    src: "/tmp/containers-build/pyxis-{{ pyxis_version }}.tar.gz"
    dest: "/tmp/containers-build/"
    remote_src: yes
    creates: "/tmp/containers-build/pyxis-{{ pyxis_version }}"
  when: not pyxis_installed.stat.exists
  tags: pyxis

- name: "[CONTAINERS] –ö–æ–º–ø–∏–ª—è—Ü–∏—è Pyxis –ø—Ä–æ—Ç–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ Slurm"
  shell: |
    cd /tmp/containers-build/pyxis-{{ pyxis_version }}
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Slurm headers –∏–∑ /opt/slurm
    export CPPFLAGS="-I/opt/slurm/include"
    export LDFLAGS="-L/opt/slurm/lib"
    make clean || true
    make
    # –ù–ï –¥–µ–ª–∞–µ–º make install - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
    echo "Pyxis —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —Å headers –∏–∑ /opt/slurm/include"
  args:
    creates: "/tmp/containers-build/pyxis-{{ pyxis_version }}/spank_pyxis.so"
  when: not pyxis_installed.stat.exists
  tags: pyxis

- name: "[CONTAINERS] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Pyxis –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
  shell: |
    cp /tmp/containers-build/pyxis-{{ pyxis_version }}/spank_pyxis.so {{ pyxis_library_path }}
    chmod 755 {{ pyxis_library_path }}
    echo "Pyxis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ: {{ pyxis_library_path }}"
  args:
    creates: "{{ pyxis_library_path }}"
  when: not pyxis_installed.stat.exists
  tags: pyxis

# =============================================================================
# SLURM HOOKS (–∫–∞–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
# =============================================================================

- name: "[CONTAINERS] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Slurm PMI hook"
  file:
    path: /etc/enroot/hooks.d/50-slurm-pmi.sh
    state: link
    src: /usr/share/enroot/hooks.d/50-slurm-pmi.sh
    force: yes
  failed_when: false
  when: inventory_hostname in groups['slurm_compute']
  tags: hooks

- name: "[CONTAINERS] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Slurm PyTorch hook"
  file:
    path: /etc/enroot/hooks.d/50-slurm-pytorch.sh
    state: link
    src: /usr/share/enroot/hooks.d/50-slurm-pytorch.sh
    force: yes
  failed_when: false
  when: inventory_hostname in groups['slurm_compute']
  tags: hooks

# =============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° SLURM
# =============================================================================

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ plugstack.conf –¥–ª—è SPANK –ø–ª–∞–≥–∏–Ω–∞"
  template:
    src: plugstack.conf.j2
    dest: "{{ pyxis_spank_config }}"
    owner: root
    group: root
    mode: '0644'
    backup: yes
  notify: restart slurmctld
  tags: 
    - slurm
    - config

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ Prolog —Å–∫—Ä–∏–ø—Ç–∞"
  template:
    src: prolog.sh.j2
    dest: "{{ slurm_prolog_dir }}/enroot_prolog.sh"
    owner: root
    group: root
    mode: '0755'
  when: enroot_prolog_enabled
  tags: 
    - prolog
    - scripts

- name: "[CONTAINERS] –°–æ–∑–¥–∞–Ω–∏–µ Epilog —Å–∫—Ä–∏–ø—Ç–∞"
  template:
    src: epilog.sh.j2
    dest: "{{ slurm_epilog_dir }}/enroot_epilog.sh"
    owner: root
    group: root
    mode: '0755'
  when: enroot_epilog_enabled
  tags: 
    - epilog
    - scripts

# =============================================================================
# –ü–†–û–í–ï–†–ö–ò –ò –í–ê–õ–ò–î–ê–¶–ò–Ø
# =============================================================================

- name: "[CONTAINERS] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Enroot"
  command: enroot version
  register: enroot_version_check
  changed_when: false
  failed_when: false
  tags: verify

- name: "[CONTAINERS] –ü—Ä–æ–≤–µ—Ä–∫–∞ SPANK –ø–ª–∞–≥–∏–Ω–∞ Pyxis"
  stat:
    path: "{{ pyxis_library_path }}"
  register: pyxis_plugin_check
  tags: verify

- name: "[CONTAINERS] –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Enroot"
  shell: |
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–æ—Ç root)
    timeout 60 enroot import docker://hello-world 2>/dev/null || echo 'Import test completed'
    echo "Enroot –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
  register: enroot_basic_test
  changed_when: false
  failed_when: false
  when: containers_verify_installation
  tags: verify

- name: "[CONTAINERS] –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)"
  shell: |
    if command -v nvidia-smi >/dev/null 2>&1; then
      nvidia-smi -L | wc -l
    else
      echo "0"
    fi
  register: gpu_count_check
  changed_when: false
  when: enroot_gpu_support
  tags: verify

# =============================================================================
# –û–ß–ò–°–¢–ö–ê
# =============================================================================

- name: "[CONTAINERS] –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–±–æ—Ä–∫–∏"
  file:
    path: "/tmp/containers-build"
    state: absent
  tags: 
    - cleanup
    - never

# =============================================================================
# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
# =============================================================================

- name: "[CONTAINERS] –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
  debug:
    msg: |
      ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {{ inventory_hostname }}!
      
      üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
      üîß Enroot: {{ enroot_version_check.stdout | default('–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') }}
      üîå Pyxis SPANK: {{ pyxis_plugin_check.stat.exists | ternary('—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '–æ—à–∏–±–∫–∞') }}
      
      üéÆ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {{ enroot_gpu_support | ternary('–≤–∫–ª—é—á–µ–Ω–∞', '–æ—Ç–∫–ª—é—á–µ–Ω–∞') }}
      {% if enroot_gpu_support and gpu_count_check.stdout is defined %}
      üìä GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {{ gpu_count_check.stdout }} —à—Ç.
      {% endif %}
      
      üóÇÔ∏è –ú–æ–Ω—Ç–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
      {% for mount in enroot_bind_mounts %}
      üìÅ {{ mount }}
      {% endfor %}
      
      üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
      üìù Enroot: {{ enroot_config_dir }}/enroot.conf
      üîå SPANK: {{ pyxis_spank_config }}
      üìú Prolog: {{ enroot_prolog_enabled | ternary('–≤–∫–ª—é—á–µ–Ω', '–æ—Ç–∫–ª—é—á–µ–Ω') }}
      üìú Epilog: {{ enroot_epilog_enabled | ternary('–≤–∫–ª—é—á–µ–Ω', '–æ—Ç–∫–ª—é—á–µ–Ω') }}
      
      üöÄ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á!
  tags: verify