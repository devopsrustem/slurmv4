# fix_capabilities.yml
---
- name: "🔧 ИСПРАВЛЕНИЕ ENROOT CAPABILITIES"
  hosts: slurm_cluster
  become: true
  gather_facts: false
  
  tasks:
    - name: "📝 Создание правильной конфигурации Enroot для unprivileged пользователей"
      copy:
        dest: /etc/enroot/enroot.conf
        content: |
          # Enroot Configuration for Unprivileged Users
          # Generated by Ansible
          
          # Basic paths
          ENROOT_DATA_PATH /var/lib/enroot
          ENROOT_CACHE_PATH /var/cache/enroot
          ENROOT_RUNTIME_PATH /run/enroot
          
          # Mount points
          ENROOT_MOUNT_HOME /home:/home
          ENROOT_MOUNT_HOME /sw:/sw
          
          # CRITICAL: Disable capabilities for unprivileged users
          ENROOT_RESTRICT_DEV yes
          ENROOT_ROOTFS_WRITABLE no
          
          # User namespaces (if available)
          ENROOT_REMAP_ROOT yes
          
          # Disable setuid/setgid for security
          ENROOT_ALLOW_SETUID no
          
          # Don't try to set capabilities
          ENROOT_CAP_SYS_ADMIN no
          
          # Use squashfs for better compatibility
          ENROOT_SQUASH_OPTIONS -noappend
        owner: root
        group: root
        mode: '0644'
        backup: yes
      register: enroot_config_update
      
    - name: "🔧 Проверка user namespaces на системе"
      shell: |
        echo "Проверка поддержки user namespaces:"
        
        # Проверяем доступность user namespaces
        if [ -f /proc/sys/user/max_user_namespaces ]; then
          echo "max_user_namespaces: $(cat /proc/sys/user/max_user_namespaces)"
        else
          echo "User namespaces не поддерживаются"
        fi
        
        # Проверяем unprivileged_userns_clone
        if [ -f /proc/sys/kernel/unprivileged_userns_clone ]; then
          echo "unprivileged_userns_clone: $(cat /proc/sys/kernel/unprivileged_userns_clone)"
        else
          echo "unprivileged_userns_clone не найден"
        fi
        
        # Попытка включить user namespaces если нужно
        if [ -f /proc/sys/kernel/unprivileged_userns_clone ]; then
          current=$(cat /proc/sys/kernel/unprivileged_userns_clone)
          if [ "$current" = "0" ]; then
            echo "Включаем unprivileged user namespaces..."
            echo 1 > /proc/sys/kernel/unprivileged_userns_clone
            echo "Новое значение: $(cat /proc/sys/kernel/unprivileged_userns_clone)"
          fi
        fi
        
      register: userns_check
      failed_when: false
      
    - name: "📊 Результат проверки namespaces"
      debug:
        var: userns_check.stdout_lines
        
    - name: "🔧 Альтернативная конфигурация для старых систем"
      copy:
        dest: /etc/enroot/enroot.conf
        content: |
          # Enroot Configuration - Maximum Compatibility Mode
          # Generated by Ansible
          
          # Basic paths
          ENROOT_DATA_PATH /var/lib/enroot
          ENROOT_CACHE_PATH /var/cache/enroot
          ENROOT_RUNTIME_PATH /run/enroot
          
          # Mount points
          ENROOT_MOUNT_HOME /home:/home
          ENROOT_MOUNT_HOME /sw:/sw
          
          # COMPATIBILITY MODE - no advanced features
          ENROOT_RESTRICT_DEV yes
          ENROOT_ROOTFS_WRITABLE no
          ENROOT_ALLOW_SETUID no
          
          # Use simple extraction without capabilities
          ENROOT_ALLOW_SUPERUSER yes
          ENROOT_ALLOW_PRIVILEGED no
          
          # Disable problematic features
          ENROOT_SQUASH_OPTIONS -noappend -no-xattrs
        owner: root
        group: root
        mode: '0644'
      when: userns_check.stdout is defined and 'не поддерживаются' in userns_check.stdout

- name: "🧪 ТЕСТ ИСПРАВЛЕНИЯ CAPABILITIES"
  hosts: slurm_master
  become: false
  tasks:
    - name: "🧪 Тест после исправления capabilities"
      shell: |
        echo "🧪 ТЕСТ КОНТЕЙНЕРА ПОСЛЕ ИСПРАВЛЕНИЯ CAPABILITIES"
        echo "Пользователь: $(whoami)"
        echo ""
        
        echo "Проверяем конфигурацию enroot:"
        head -10 /etc/enroot/enroot.conf
        echo ""
        
        echo "Тест простого контейнера:"
        timeout 120 srun --container-image=docker://hello-world 2>&1
        
        echo ""
        echo "Тест Ubuntu контейнера:"
        timeout 120 srun --container-image=docker://ubuntu:22.04 echo "Ubuntu container works!" 2>&1
        
      register: capabilities_test
      failed_when: false
      
    - name: "🎉 РЕЗУЛЬТАТ ТЕСТА CAPABILITIES"
      debug:
        msg: |
          🧪 ТЕСТ ПОСЛЕ ИСПРАВЛЕНИЯ CAPABILITIES:
          {{ capabilities_test.stdout }}
          
          {% if 'Ubuntu container works!' in capabilities_test.stdout %}
          🎉🎉🎉 UBUNTU КОНТЕЙНЕР РАБОТАЕТ! CAPABILITIES ИСПРАВЛЕНЫ! 🎉🎉🎉
          {% elif 'Hello from Docker' in capabilities_test.stdout %}
          🎉🎉 HELLO-WORLD РАБОТАЕТ! 🎉🎉
          {% elif 'failed to set capabilities' in capabilities_test.stdout %}
          💔 Все еще проблемы с capabilities
          {% elif 'Permission denied' in capabilities_test.stdout %}
          💔 Все еще проблемы с правами
          {% else %}
          ⚠️ Другая проблема - проверьте вывод
          {% endif %}