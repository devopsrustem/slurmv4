# proper_fix.yml
---
- name: "🔧 ПРАВИЛЬНОЕ ИСПРАВЛЕНИЕ ENROOT/PYXIS"
  hosts: slurm_cluster
  become: true
  gather_facts: false
  
  tasks:
    - name: "🔧 Установка правильных capabilities на enroot"
      shell: |
        echo "🔧 ПРАВИЛЬНАЯ НАСТРОЙКА ENROOT НА {{ inventory_hostname }}"
        
        # Находим все исполняемые файлы enroot
        ENROOT_BINS=$(find /usr -name "*enroot*" -type f -executable 2>/dev/null)
        
        echo "Найденные enroot исполняемые файлы:"
        echo "$ENROOT_BINS"
        
        # Устанавливаем capabilities на нужные утилиты
        for bin in $ENROOT_BINS; do
          echo "Настройка $bin..."
          
          # Убираем старые capabilities
          setcap -r "$bin" 2>/dev/null || true
          
          # Устанавливаем минимально необходимые capabilities
          if [[ "$bin" == *"enroot"* ]]; then
            setcap 'cap_sys_admin+ep' "$bin" 2>/dev/null || echo "Не удалось установить capabilities на $bin"
          fi
        done
        
        # Специально для enroot-aufs2ovlfs если он есть
        if [ -f /usr/bin/enroot-aufs2ovlfs ]; then
          echo "Настройка enroot-aufs2ovlfs..."
          setcap 'cap_sys_admin+ep' /usr/bin/enroot-aufs2ovlfs || echo "Не удалось"
        fi
        
        # Проверяем результат
        echo "Проверка capabilities:"
        for bin in $ENROOT_BINS; do
          echo "$bin: $(getcap $bin 2>/dev/null || echo 'нет capabilities')"
        done
        
      register: capabilities_setup
      
    - name: "🔧 Настройка user namespaces и subuid/subgid"
      shell: |
        echo "🔧 НАСТРОЙКА USER NAMESPACES"
        
        # Включаем user namespaces
        echo 1 > /proc/sys/kernel/unprivileged_userns_clone 2>/dev/null || echo "Уже включено"
        
        # Увеличиваем лимиты
        echo 65536 > /proc/sys/user/max_user_namespaces 2>/dev/null || echo "Уже настроено"
        
        # Настраиваем subuid/subgid для всех пользователей
        # Очищаем старые записи для master
        sed -i '/^master:/d' /etc/subuid /etc/subgid 2>/dev/null || true
        
        # Добавляем новые
        echo "master:100000:65536" >> /etc/subuid
        echo "master:100000:65536" >> /etc/subgid
        
        echo "User namespaces настроены"
        echo "subuid: $(grep master /etc/subuid || echo 'не найдено')"
        echo "subgid: $(grep master /etc/subgid || echo 'не найдено')"
        
      register: namespaces_setup
      
    - name: "📝 Создание ОКОНЧАТЕЛЬНОЙ конфигурации Enroot"
      copy:
        dest: /etc/enroot/enroot.conf
        content: |
          # Enroot Configuration - FINAL VERSION
          # Generated by Ansible - ПРАВИЛЬНАЯ ВЕРСИЯ
          
          # Basic paths
          ENROOT_DATA_PATH /var/lib/enroot
          ENROOT_CACHE_PATH /var/cache/enroot
          ENROOT_RUNTIME_PATH /run/enroot
          
          # Mount points
          ENROOT_MOUNT_HOME /home:/home
          ENROOT_MOUNT_HOME /sw:/sw
          
          # User namespaces - ВКЛЮЧЕНО
          ENROOT_REMAP_ROOT yes
          
          # Security settings - СБАЛАНСИРОВАННЫЕ
          ENROOT_RESTRICT_DEV no
          ENROOT_ROOTFS_WRITABLE yes
          ENROOT_ALLOW_SETUID yes
          ENROOT_ALLOW_PRIVILEGED yes
          
          # Capabilities - РАЗРЕШЕНО (у нас есть setcap)
          ENROOT_CAP_SYS_ADMIN yes
          
          # Compression settings
          ENROOT_SQUASH_OPTIONS -comp gzip -noappend
          
          # Runtime settings
          ENROOT_TEMP_PATH /tmp
          ENROOT_MAX_PROCESSORS {{ ansible_processor_vcpus }}
          ENROOT_MAX_MEMORY {{ (ansible_memtotal_mb * 0.8) | int }}M
        owner: root
        group: root
        mode: '0644'
        backup: yes
        
    - name: "📊 Результат настройки"
      debug:
        msg: |
          🔧 ПРАВИЛЬНАЯ НАСТРОЙКА ЗАВЕРШЕНА НА {{ inventory_hostname }}:
          
          📊 Capabilities:
          {{ capabilities_setup.stdout }}
          
          📊 User namespaces:
          {{ namespaces_setup.stdout }}

- name: "🧪 ФИНАЛЬНЫЙ ТЕСТ ПРАВИЛЬНОГО РЕШЕНИЯ"
  hosts: slurm_master
  become: false
  tasks:
    - name: "🧪 Тест после ПРАВИЛЬНОГО исправления"
      shell: |
        echo "🧪 ФИНАЛЬНЫЙ ТЕСТ ПОСЛЕ ПРАВИЛЬНОГО ИСПРАВЛЕНИЯ"
        echo "Пользователь: $(whoami)"
        echo ""
        
        echo "=== Проверка системы ==="
        echo "User namespaces: $(cat /proc/sys/kernel/unprivileged_userns_clone 2>/dev/null || echo 'недоступно')"
        echo "Max namespaces: $(cat /proc/sys/user/max_user_namespaces 2>/dev/null || echo 'недоступно')"
        echo "subuid: $(grep $(whoami) /etc/subuid 2>/dev/null || echo 'не настроено')"
        
        echo ""
        echo "=== ТЕСТ ПРОСТОГО КОНТЕЙНЕРА ==="
        timeout 120 srun --container-image=docker://hello-world 2>&1
        
        echo ""
        echo "=== ТЕСТ UBUNTU КОНТЕЙНЕРА ==="
        timeout 120 srun --container-image=docker://ubuntu:22.04 echo "Ubuntu container SUCCESS!" 2>&1
        
        echo ""
        echo "=== ТЕСТ СЛОЖНОГО КОНТЕЙНЕРА ==="
        timeout 120 srun --container-image=docker://ubuntu:22.04 /bin/bash -c "ls /bin | head -5" 2>&1
        
      register: final_proper_test
      failed_when: false
      
    - name: "🎉 РЕЗУЛЬТАТ ПРАВИЛЬНОГО РЕШЕНИЯ"
      debug:
        msg: |
          🧪 ФИНАЛЬНЫЙ ТЕСТ ПРАВИЛЬНОГО РЕШЕНИЯ:
          {{ final_proper_test.stdout }}
          
          {% if 'Ubuntu container SUCCESS!' in final_proper_test.stdout %}
          🎉🎉🎉 ПРАВИЛЬНОЕ РЕШЕНИЕ СРАБОТАЛО! PYXIS РАБОТАЕТ! 🎉🎉🎉
          {% elif 'Hello from Docker' in final_proper_test.stdout %}
          🎉🎉 БАЗОВЫЕ КОНТЕЙНЕРЫ РАБОТАЮТ! 🎉🎉
          {% elif 'failed to set capabilities' in final_proper_test.stdout %}
          💔 Все еще проблемы с capabilities - нужно проверить setcap
          {% else %}
          ⚠️ Проверяем что получилось - возможно нужны дополнительные настройки
          {% endif %}