# quick_fix_official.yml
---
- name: "🔥 БЫСТРОЕ ИСПРАВЛЕНИЕ - ОФИЦИАЛЬНЫЙ ПОДХОД"
  hosts: slurm_compute,slurm_login  # И на login тоже!
  become: true
  gather_facts: false
  
  tasks:
    - name: "🧹 Очистка старых файлов"
      shell: |
        echo "🧹 Очистка старых установок..."
        
        # Удаляем старые плагины и конфиги
        rm -f /usr/local/src/pyxis/spank_pyxis.so
        rm -f /etc/slurm/plugstack.conf
        rm -rf /usr/local/src/pyxis/*
        
        # Очищаем старые установки pyxis
        rm -f /usr/local/lib/slurm/spank_pyxis.so
        rm -f /usr/local/share/pyxis/pyxis.conf
        rm -f /etc/slurm/plugstack.conf.d/pyxis.conf
        
        echo "Старые файлы удалены"
      register: cleanup_result
      
    - name: "📁 Проверка headers"
      shell: |
        if [ -f /opt/slurm/include/slurm/spank.h ]; then
          echo "✅ Headers найдены"
        else
          echo "❌ Headers не найдены - копируем из NFS"
          mkdir -p /opt/slurm/include
          cp -r /sw/slurm-complete/include/* /opt/slurm/include/ || exit 1
        fi
        
        echo "Headers: $(find /opt/slurm/include -name '*.h' | wc -l) файлов"
      register: headers_check
      
    - name: "📦 Установка Enroot (если нужно)"
      shell: |
        if ! command -v enroot >/dev/null 2>&1; then
          apt update
          apt install -y fuse3 squashfs-tools curl build-essential pkg-config
          cd /tmp
          wget -q https://github.com/NVIDIA/enroot/releases/download/v3.5.0/enroot_3.5.0-1_amd64.deb
          apt install -y ./enroot_3.5.0-1_amd64.deb
          echo "Enroot установлен"
        else
          echo "Enroot уже установлен"
        fi
      register: enroot_install
      
    - name: "🔨 ОФИЦИАЛЬНАЯ установка Pyxis"
      shell: |
        echo "🔨 ОФИЦИАЛЬНАЯ УСТАНОВКА PYXIS"
        
        # Подготовка
        mkdir -p /tmp/pyxis-build
        cd /tmp/pyxis-build
        rm -rf *
        
        # Скачивание
        wget -q https://github.com/NVIDIA/pyxis/archive/v0.20.0.tar.gz
        tar -xf v0.20.0.tar.gz --strip-components=1
        
        # Компиляция
        export CPPFLAGS="-I/opt/slurm/include"
        export LDFLAGS="-L/opt/slurm/lib"
        make clean || true
        make
        
        # ОФИЦИАЛЬНАЯ УСТАНОВКА!
        make install
        
        echo "✅ Pyxis установлен официально!"
        echo "Плагин: $(find /usr/local -name 'spank_pyxis.so')"
        echo "Конфиг: $(find /usr/local -name 'pyxis.conf')"
        
      register: pyxis_install
      
    - name: "📝 ОФИЦИАЛЬНАЯ конфигурация"
      shell: |
        echo "📝 Создание официальной конфигурации"
        
        # Создаем директорию
        mkdir -p /etc/slurm/plugstack.conf.d
        
        # ОФИЦИАЛЬНАЯ символическая ссылка!
        ln -sf /usr/local/share/pyxis/pyxis.conf /etc/slurm/plugstack.conf.d/pyxis.conf
        
        echo "✅ Конфигурация создана:"
        ls -la /etc/slurm/plugstack.conf.d/pyxis.conf
        echo "Содержимое:"
        cat /usr/local/share/pyxis/pyxis.conf
        
      register: config_create
      
    - name: "📁 Создание директорий Enroot"
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/lib/enroot
        - /var/cache/enroot
        - /run/enroot
        - /etc/enroot
        
    - name: "📝 Конфигурация Enroot"
      copy:
        dest: /etc/enroot/enroot.conf
        content: |
          ENROOT_DATA_PATH /var/lib/enroot
          ENROOT_CACHE_PATH /var/cache/enroot
          ENROOT_RUNTIME_PATH /run/enroot
          ENROOT_MOUNT_HOME /home:/home
          ENROOT_MOUNT_HOME /sw:/sw
          ENROOT_ALLOW_PRIVILEGED yes
        mode: '0644'
        
    - name: "🔄 Перезапуск slurmd (только compute)"
      systemd:
        name: slurmd
        state: restarted
      when: inventory_hostname in groups['slurm_compute']
      
    - name: "⏰ Пауза"
      pause:
        seconds: 3
        
    - name: "✅ Финальная проверка"
      shell: |
        echo "=== РЕЗУЛЬТАТ ОФИЦИАЛЬНОЙ УСТАНОВКИ ==="
        echo "Enroot: $(enroot version)"
        echo "Pyxis плагин: $(ls -la /usr/local/lib/slurm/spank_pyxis.so 2>/dev/null || echo 'не найден')"
        echo "Pyxis конфиг: $(ls -la /usr/local/share/pyxis/pyxis.conf 2>/dev/null || echo 'не найден')"
        echo "Ссылка: $(ls -la /etc/slurm/plugstack.conf.d/pyxis.conf 2>/dev/null || echo 'не найдена')"
        if [ "{{ inventory_hostname in groups['slurm_compute'] }}" = "True" ]; then
          echo "slurmd: $(systemctl is-active slurmd)"
        fi
        echo "Тип узла: {{ 'compute' if inventory_hostname in groups['slurm_compute'] else 'login' }}"
      register: final_check
      
    - name: "📊 Результат"
      debug:
        var: final_check.stdout_lines

# ТЕСТ КОНТЕЙНЕРА
- name: "🧪 ТЕСТ КОНТЕЙНЕРА"
  hosts: slurm_master
  become: true
  tasks:
    - name: "🧪 Тест контейнера (официальный pyxis)"
      shell: |
        echo "🧪 ТЕСТИРУЕМ КОНТЕЙНЕРЫ С ОФИЦИАЛЬНЫМ PYXIS..."
        timeout 120 srun --container-image=docker://hello-world 2>&1
      register: container_test
      failed_when: false
      
    - name: "🎉 РЕЗУЛЬТАТ"
      debug:
        msg: |
          🧪 ТЕСТ КОНТЕЙНЕРА:
          {{ container_test.stdout }}
          {{ container_test.stderr }}
          
          {% if 'Hello from Docker' in container_test.stdout %}
          🎉🎉🎉 КОНТЕЙНЕРЫ РАБОТАЮТ! ОФИЦИАЛЬНЫЙ ПОДХОД СРАБОТАЛ! 🎉🎉🎉
          {% else %}
          💔 Контейнеры еще не работают, нужна дополнительная отладка
          
          📋 Проверьте:
          1. ls -la /usr/local/lib/slurm/spank_pyxis.so
          2. ls -la /etc/slurm/plugstack.conf.d/pyxis.conf  
          3. tail /var/log/slurm/slurmd.log | grep -i spank
          {% endif %}